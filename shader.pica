; Hopefully, a PICA200 vertex shader (less and less basic by the day)

; Model matrix uniform - loaded by the renderer before rendering a given model
.fvec modelMtx[4]

; Camera matrix uniform - loaded by the renderer before any given render
.fvec camMtx[4]

; Projection matrix uniform - loaded by the renderer before any given render
.fvec projMtx[4]

; Useful constants
; Define a vec4 with various useful values as the elements, then set aliases to get them out
.constf useful_constants(0.0, 1.0, 2.0, 0.5)
; All zeroes - copy out the first element in all 4 places
.alias zeroes useful_constants.xxxx
; All ones - copy out the second element in all 4 places
.alias ones useful_constants.yyyy
; All twos
.alias twos useful_constants.zzzz
; All halves
.alias halves useful_constants.wwww
; (1.0, 0.0, 0.0, 0.0)
.alias ozzz useful_constants.yxxx

; Output registers, written to by the shader
.out outpos pos
.out outcol clr
.out outtex0 texcoord0
.out outtex1 texcoord1
.out outview view
.out outnq normalquat

; Inputs (passed in through v0..=v15, with aliases for convenience)
.in inpos
.in intex
.in innrm
.in intng

; The actual shader function
.proc main
    ; r0.xyz = xyz components of inpos
    mov r0.xyz, inpos

    ; r0.w = 1.0 from ones constant alias
    mov r0.w, ones

    ; r1 = modelMatrix * r0
    ; perform matrix * vector multiplication via dot product instruction one component at a time
    dp4 r1.x, modelMtx[0], r0
    dp4 r1.y, modelMtx[1], r0
    dp4 r1.z, modelMtx[2], r0
    dp4 r1.w, modelMtx[3], r0

    ; r2 = cameraMatrix * r1
    dp4 r2.x, camMtx[0], r1
    dp4 r2.y, camMtx[1], r1
    dp4 r2.z, camMtx[2], r1
    dp4 r2.w, camMtx[3], r1

    ; outview = -r2
    ;mov outview, -r1
    mov outview, -r2

    ; outpos = projectionMatrix * r2
    dp4 outpos.x, projMtx[0], r2
    dp4 outpos.y, projMtx[1], r2
    dp4 outpos.z, projMtx[2], r2
    dp4 outpos.w, projMtx[3], r2

    ; outtex{0, 1} = intex
    mov outtex0, intex
    mov outtex1, intex

    ; r14 = modelMatrix * innrm
    ; r12 = modelMatrix * intng
    ; transform the normal and tangent vectors with the model matrix
    ; TODO: normal matrix
    dp3 r15.x, modelMtx[0], innrm
    dp3 r15.y, modelMtx[1], innrm
    dp3 r15.z, modelMtx[2], innrm
    dp3 r13.x, modelMtx[0], intng
    dp3 r13.y, modelMtx[1], intng
    dp3 r13.z, modelMtx[2], intng

    dp3 r14.x, camMtx[0], r15
    dp3 r14.y, camMtx[1], r15
    dp3 r14.z, camMtx[2], r15
    dp3 r12.x, camMtx[0], r13
    dp3 r12.y, camMtx[1], r13
    dp3 r12.z, camMtx[2], r13

    ; r14 = r14 * 1/sqrt(r14.x**2 + r14.y**2 + r14.z**2)
    ; r12 = r12 * 〃
    ; normalise r14/r12
    ; this works because, assuming the tangent and normal are both
    ; unit vectors, they'll have the same modulus after being
    ; transformed
    dp3 r6.x, r14, r14
    rsq r6.x, r6.x
    mul r14.xyz, r14.xyz, r6.x
    mul r12.xyz, r12.xyz, r6.x

	; Cross N × T = B
	mul r13.xyz, r14.yzx, r12.zxy
	mad r13.xyz, -r12.yzx, r14.zxy, r13

	; Cross B x N = T (for ensuring orthonormalisation)
	mul r12.xyz, r13.yzx, r14.zxy
	mad r12.xyz, -r14.yzx, r13.zxy, r12

	; Readjust vectors for easier calculation:
	; r12 = (Tx, Ty, Tz, Bz)
	; r13 = (Tx, By, Nz, 1 )
	; r14 = (Nx, Ny, Nz, Bx)
	mov r12.w, r13.z
	mov r14.w, r13.x
	mov r13.x, r12.x
	mov r13.z, r14.z
	mov r13.w, ones

	; Perform case discrimination
	mov r11.z, zeroes
	sge r10, zeroes, r14.z
	mov r11.xyw, r13.zxzy
	add r10, r10, r10
	mad r11.y, r10, r11, -r11
	cmp r11.xy, le, ge, r11.zw

	ifc cmp.x
		ifc cmp.y
			; X case
			; x = 1 + Tx - By - Nz
			; y = +Ty + Bx
			; z = +Tz + Nx
			; w = +Bz - Ny
			mov r13.yz, -r13
			mov r14.y, -r14
			dp4 r0.x, r13.w, r13
			add r0.yzw, r12.yyzw, r14.wwxy
		.else
			; Y case
			; x = +Ty + Bx
			; y = 1 - Tx + By - Nz
			; z = +Bz + Ny
			; w = -Tz + Nx 
			mov r13.xz, -r13
			mov r12.z, -r12
			dp4 r0.y, r13.w, r13
			add r0.xzw, r12.yywz, r14.wwyx
		.end
	.else
		ifc cmp.y
			; Z case
			; x = +Tz + Nx
			; y = +Bz + Ny
			; z = 1 - Tx - By + Nz
			; w = +Ty - Bx
			mov r13.xy, -r13
			mov r14.w, -r14
			dp4 r0.z, r13.w, r13
			add r0.xyw, r12.zwwy, r14.xyyw
		.else
			; W case
			; x = +Bz - Ny
			; y = -Tz + Nx 
			; z = +Ty - Bx  
			; w = 1 + Tx + By + Nz
			mov r12.z, -r12
			mov r14.yw, -r14
			dp4 r0.w, r13.w, r13
			add r0.xyz, r12.wzyy, r14.yxww
		.end
	.end

	; Renormalise quaternion and output
	dp4 r1.x, r0, r0
	rsq r1.x, r1.x
	mul outnq, r0, r1.x

	; Output colour
	mov outcol, ones

	; We're finished
	end
.end ; main
